/**
* This file was automatically generated by cosmwasm-typescript-gen@0.2.12.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the cosmwasm-typescript-gen generate command to regenerate this file.
*/
import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { Coin } from "@cosmjs/amino";
import { Expiration, Binary } from "./Sg721Contract.ts";
export interface Sg721Message {
    contractAddress: string;
    sender: string;
    transferNft: ({ recipient, tokenId }: {
        recipient: string;
        tokenId: string;
    }, funds?: readonly Coin[]) => MsgExecuteContractEncodeObject;
    sendNft: ({ contract, msg, tokenId }: {
        contract: string;
        msg: Binary;
        tokenId: string;
    }, funds?: readonly Coin[]) => MsgExecuteContractEncodeObject;
    approve: ({ expires, spender, tokenId }: {
        expires?: Expiration;
        spender: string;
        tokenId: string;
    }, funds?: readonly Coin[]) => MsgExecuteContractEncodeObject;
    revoke: ({ spender, tokenId }: {
        spender: string;
        tokenId: string;
    }, funds?: readonly Coin[]) => MsgExecuteContractEncodeObject;
    approveAll: ({ expires, operator }: {
        expires?: Expiration;
        operator: string;
    }, funds?: readonly Coin[]) => MsgExecuteContractEncodeObject;
    revokeAll: ({ operator }: {
        operator: string;
    }, funds?: readonly Coin[]) => MsgExecuteContractEncodeObject;
    mint: (funds?: readonly Coin[]) => MsgExecuteContractEncodeObject;
    burn: ({ tokenId }: {
        tokenId: string;
    }, funds?: readonly Coin[]) => MsgExecuteContractEncodeObject;
}
export declare class Sg721MessageComposer implements Sg721Message {
    sender: string;
    contractAddress: string;
    constructor(sender: string, contractAddress: string);
    transferNft: ({ recipient, tokenId }: {
        recipient: string;
        tokenId: string;
    }, funds?: readonly Coin[]) => MsgExecuteContractEncodeObject;
    sendNft: ({ contract, msg, tokenId }: {
        contract: string;
        msg: Binary;
        tokenId: string;
    }, funds?: readonly Coin[]) => MsgExecuteContractEncodeObject;
    approve: ({ expires, spender, tokenId }: {
        expires?: Expiration;
        spender: string;
        tokenId: string;
    }, funds?: readonly Coin[]) => MsgExecuteContractEncodeObject;
    revoke: ({ spender, tokenId }: {
        spender: string;
        tokenId: string;
    }, funds?: readonly Coin[]) => MsgExecuteContractEncodeObject;
    approveAll: ({ expires, operator }: {
        expires?: Expiration;
        operator: string;
    }, funds?: readonly Coin[]) => MsgExecuteContractEncodeObject;
    revokeAll: ({ operator }: {
        operator: string;
    }, funds?: readonly Coin[]) => MsgExecuteContractEncodeObject;
    mint: (funds?: readonly Coin[]) => MsgExecuteContractEncodeObject;
    burn: ({ tokenId }: {
        tokenId: string;
    }, funds?: readonly Coin[]) => MsgExecuteContractEncodeObject;
}
