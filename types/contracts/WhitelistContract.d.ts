/**
* This file was automatically generated by cosmwasm-typescript-gen@0.2.14.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the cosmwasm-typescript-gen generate command to regenerate this file.
*/
import { CosmWasmClient, ExecuteResult, SigningCosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
export declare type Timestamp = Uint64;
export declare type Uint64 = string;
export declare type Uint128 = string;
export interface ConfigResponse {
    end_time: Timestamp;
    is_active: boolean;
    member_limit: number;
    num_members: number;
    per_address_limit: number;
    start_time: Timestamp;
    unit_price: Coin;
    [k: string]: unknown;
}
export interface Coin {
    amount: Uint128;
    denom: string;
    [k: string]: unknown;
}
export declare type Addr = string;
export interface Config {
    admin: Addr;
    end_time: Timestamp;
    member_limit: number;
    num_members: number;
    per_address_limit: number;
    start_time: Timestamp;
    unit_price: Coin;
    [k: string]: unknown;
}
export interface HasEndedResponse {
    has_ended: boolean;
    [k: string]: unknown;
}
export interface HasMemberResponse {
    has_member: boolean;
    [k: string]: unknown;
}
export interface HasStartedResponse {
    has_started: boolean;
    [k: string]: unknown;
}
export interface InstantiateMsg {
    end_time: Timestamp;
    member_limit: number;
    members: string[];
    per_address_limit: number;
    start_time: Timestamp;
    unit_price: Coin;
    [k: string]: unknown;
}
export interface IsActiveResponse {
    is_active: boolean;
    [k: string]: unknown;
}
export interface MembersResponse {
    members: string[];
    [k: string]: unknown;
}
export interface WhitelistReadOnlyInterface {
    contractAddress: string;
    hasStarted: () => Promise<HasStartedResponse>;
    hasEnded: () => Promise<HasEndedResponse>;
    isActive: () => Promise<IsActiveResponse>;
    members: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<MembersResponse>;
    hasMember: ({ member }: {
        member: string;
    }) => Promise<HasMemberResponse>;
    config: () => Promise<ConfigResponse>;
}
export declare class WhitelistQueryClient implements WhitelistReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    hasStarted: () => Promise<HasStartedResponse>;
    hasEnded: () => Promise<HasEndedResponse>;
    isActive: () => Promise<IsActiveResponse>;
    members: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<MembersResponse>;
    hasMember: ({ member }: {
        member: string;
    }) => Promise<HasMemberResponse>;
    config: () => Promise<ConfigResponse>;
}
export interface WhitelistInterface extends WhitelistReadOnlyInterface {
    contractAddress: string;
    sender: string;
    updateStartTime: (fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    updateEndTime: (fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    addMembers: (fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    removeMembers: (fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    updatePerAddressLimit: (fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    increaseMemberLimit: (fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
}
export declare class WhitelistClient extends WhitelistQueryClient implements WhitelistInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    updateStartTime: (fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    updateEndTime: (fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    addMembers: (fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    removeMembers: (fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    updatePerAddressLimit: (fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    increaseMemberLimit: (fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
}
