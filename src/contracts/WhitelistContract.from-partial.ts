/**
* This file was automatically generated by cosmwasm-typescript-gen@0.2.14.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the cosmwasm-typescript-gen generate command to regenerate this file.
*/

import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Timestamp, Uint64, Uint128, ConfigResponse, Coin, Addr, Config, HasEndedResponse, HasMemberResponse, HasStartedResponse, InstantiateMsg, IsActiveResponse, MembersResponse } from "./WhitelistContract";
export interface WhitelistMessage {
  contractAddress: string;
  sender: string;
  updateStartTime: (funds?: readonly Coin[]) => MsgExecuteContractEncodeObject;
  updateEndTime: (funds?: readonly Coin[]) => MsgExecuteContractEncodeObject;
  addMembers: (funds?: readonly Coin[]) => MsgExecuteContractEncodeObject;
  removeMembers: (funds?: readonly Coin[]) => MsgExecuteContractEncodeObject;
  updatePerAddressLimit: (funds?: readonly Coin[]) => MsgExecuteContractEncodeObject;
  increaseMemberLimit: (funds?: readonly Coin[]) => MsgExecuteContractEncodeObject;
}
export class WhitelistMessageComposer implements WhitelistMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateStartTime = this.updateStartTime.bind(this);
    this.updateEndTime = this.updateEndTime.bind(this);
    this.addMembers = this.addMembers.bind(this);
    this.removeMembers = this.removeMembers.bind(this);
    this.updatePerAddressLimit = this.updatePerAddressLimit.bind(this);
    this.increaseMemberLimit = this.increaseMemberLimit.bind(this);
  }

  updateStartTime = (funds?: readonly Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_start_time: {}
        })),
        funds
      })
    };
  };
  updateEndTime = (funds?: readonly Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_end_time: {}
        })),
        funds
      })
    };
  };
  addMembers = (funds?: readonly Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          add_members: {}
        })),
        funds
      })
    };
  };
  removeMembers = (funds?: readonly Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_members: {}
        })),
        funds
      })
    };
  };
  updatePerAddressLimit = (funds?: readonly Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_per_address_limit: {}
        })),
        funds
      })
    };
  };
  increaseMemberLimit = (funds?: readonly Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          increase_member_limit: {}
        })),
        funds
      })
    };
  };
}