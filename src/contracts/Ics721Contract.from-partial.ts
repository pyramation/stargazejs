/**
* This file was automatically generated by cosmwasm-typescript-gen@0.2.14.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the cosmwasm-typescript-gen generate command to regenerate this file.
*/

import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Coin } from "@cosmjs/amino";
import { ChannelResponse, ChannelInfo, IbcEndpoint, InstantiateMsg, ListChannelsResponse, PortResponse, TokensResponse } from "./Ics721Contract";
export interface Ics721Message {
  contractAddress: string;
  sender: string;
  receive: (funds?: readonly Coin[]) => MsgExecuteContractEncodeObject;
  transfer: (funds?: readonly Coin[]) => MsgExecuteContractEncodeObject;
}
export class Ics721MessageComposer implements Ics721Message {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.receive = this.receive.bind(this);
    this.transfer = this.transfer.bind(this);
  }

  receive = (funds?: readonly Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          receive: {}
        })),
        funds
      })
    };
  };
  transfer = (funds?: readonly Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          transfer: {}
        })),
        funds
      })
    };
  };
}