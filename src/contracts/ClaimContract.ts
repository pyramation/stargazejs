/**
* This file was automatically generated by cosmwasm-typescript-gen@0.2.14.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the cosmwasm-typescript-gen generate command to regenerate this file.
*/

import { CosmWasmClient, ExecuteResult, SigningCosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
export interface AdminResponse {
  admin?: string | null;
  [k: string]: unknown;
}
export interface InstantiateMsg {
  admin?: string | null;
  marketplace_addr?: string | null;
  [k: string]: unknown;
}
export type Addr = string;
export interface MarketplaceResponse {
  marketplace?: Addr | null;
  [k: string]: unknown;
}
export interface ClaimInterface {
  contractAddress: string;
  sender: string;
  claimMintNft: ({
    minterAddress
  }: {
    minterAddress: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
  saleHook: (fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
  updateAdmin: ({
    admin
  }: {
    admin?: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
  updateMarketplace: ({
    marketplaceAddr
  }: {
    marketplaceAddr?: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
}
export class ClaimClient implements ClaimInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.claimMintNft = this.claimMintNft.bind(this);
    this.saleHook = this.saleHook.bind(this);
    this.updateAdmin = this.updateAdmin.bind(this);
    this.updateMarketplace = this.updateMarketplace.bind(this);
  }

  claimMintNft = async ({
    minterAddress
  }: {
    minterAddress: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim_mint_nft: {
        minter_address: minterAddress
      }
    }, fee, memo, funds);
  };
  saleHook = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      sale_hook: {}
    }, fee, memo, funds);
  };
  updateAdmin = async ({
    admin
  }: {
    admin?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_admin: {
        admin
      }
    }, fee, memo, funds);
  };
  updateMarketplace = async ({
    marketplaceAddr
  }: {
    marketplaceAddr?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_marketplace: {
        marketplace_addr: marketplaceAddr
      }
    }, fee, memo, funds);
  };
}