{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "Change the admin",
      "type": "object",
      "required": [
        "update_admin"
      ],
      "properties": {
        "update_admin": {
          "type": "object",
          "properties": {
            "admin": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "apply a diff to the existing members. remove is applied after add, so if an address is in both, it is removed",
      "type": "object",
      "required": [
        "update_members"
      ],
      "properties": {
        "update_members": {
          "type": "object",
          "required": [
            "add",
            "remove"
          ],
          "properties": {
            "add": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Member"
              }
            },
            "remove": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Add a new hook to be informed of all membership changes. Must be called by Admin",
      "type": "object",
      "required": [
        "add_hook"
      ],
      "properties": {
        "add_hook": {
          "type": "object",
          "required": [
            "addr"
          ],
          "properties": {
            "addr": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Remove a hook. Must be called by Admin",
      "type": "object",
      "required": [
        "remove_hook"
      ],
      "properties": {
        "remove_hook": {
          "type": "object",
          "required": [
            "addr"
          ],
          "properties": {
            "addr": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Distribute funds to all members based on weight",
      "type": "object",
      "required": [
        "distribute"
      ],
      "properties": {
        "distribute": {
          "type": "object",
          "required": [
            "funds"
          ],
          "properties": {
            "funds": {
              "$ref": "#/definitions/Coin"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Member": {
      "description": "A group member has a weight associated with them. This may all be equal, or may have meaning in the app that makes use of the group (eg. voting power)",
      "type": "object",
      "required": [
        "addr",
        "weight"
      ],
      "properties": {
        "addr": {
          "type": "string"
        },
        "weight": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
